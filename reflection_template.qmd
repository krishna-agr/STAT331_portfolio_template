---
title: "STAT 331 Portfolio"
author: "Krishna Agrawal"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an \_\_.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from a Lab or Challenge assignment where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

```{r wd-1-csv} Lab 5 Q1}
#Any Assignment that occurs most often
surveys <- read_csv(here("Week#2", "Lab_Week_2", "surveys.csv"))
```

-   `xlsx`

```{r wd-1-xlsx}
#maybe some practice activity
```

-   `txt`

```{r wd-1-txt}
#maybe some preview activity or practice activity
```

**WD-2: I can select necessary columns from a dataset.**

```{r wd-2}
#Lab 4 Q6
# Create a new data set that only contains information on the 4 cities within CA
# Data set will be used in visualization
california_avocados <- city_avocados |>
  inner_join(cali_avocados,
             by = c('region' = 'cali_region')) |>
  mutate( region =  as.factor(region)) |>
  # Select relavent variables
  select(AveragePrice,
         type,
         region) |>
  group_by(region, type) |>
  # Calculate the mean price for every region and type of avocado combination
  summarise(mean_price = mean(AveragePrice))
```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r wd-3-numeric}
#Lab 3 Q 13
thirty_men <- hiphop_clean |>
  filter(simplify_ethnic == "white" & sex == "Male" & age > 30) |>
  mutate(familiarity = as.numeric(familiarity)) |>
  group_by(word) |>
  summarize(mean_fam = mean(familiarity)) 
```

-   character -- specifically a string

```{r wd-3-string}
#Lab 3 Q 13  
thirty_men <- hiphop_clean |>
  filter(simplify_ethnic == "white" & sex == "Male" & age > 30) |>
  mutate(familiarity = as.numeric(familiarity)) |>
  group_by(word) |>
  summarize(mean_fam = mean(familiarity)) 

thirty_men |>
  slice_max(mean_fam)

thirty_men |>
  slice_min(mean_fam)
  
```

-   factor

```{r wd-3-factor} Lab 3, Q13}
thirty_men <- hiphop_clean |>
  filter(simplify_ethnic == "white" & sex == "Male" & age > 30) |>
  mutate(familiarity = as.numeric(familiarity)) |>
  group_by(word) |>
  summarize(mean_fam = mean(familiarity)) 

thirty_men |>
  slice_max(mean_fam)

thirty_men |>
  slice_min(mean_fam)
  
```

-   date

```{r wd-3-date}
# Practice Activity # 5
suspects <- read_csv(here::here("data",
                                "suspect_times.csv")
                     )

suspects <- suspects |>
  mutate(Time.Spotted = ymd_hms(Time.Spotted),
         Time.Spotted = force_tz(Time.Spotted, tzone = "America/Los_Angeles"))

suspects <- suspects |>
  filter(pm(Time.Spotted) == TRUE,
         wday(Time.Spotted) != c(3,5))

Thanksgiving <- ymd(20181122, tz = "America/Los_Angeles")

timeframe <- (Thanksgiving - days(35)) %--% (Thanksgiving + days(35))

suspects <- suspects |>
  filter(Time.Spotted %within% timeframe)

Iceland <- with_tz(suspects$Time.Spotted, tzone = "Iceland")
suspects <- suspects |>
  filter(pm(Iceland) == TRUE,
         day(Time.Spotted) %in% c(22, 23, 24))

init <- ymd_hms("1970-01-01 0:0:0", tz = "America/Los_Angeles")

suspects <- suspects |>
  mutate(time = difftime(Time.Spotted, init, units = "mins"),
         time = as.integer(time)) |>
  filter(time %% 10 == 0)
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r wd-4-numeric}
# Lab 3 Q11
twenty_younger <- hiphop_clean |>
  filter(age < 20) |>
  mutate(familiarity = as.numeric(familiarity)) |>
  group_by(word) |>
  summarize(mean_fam = mean(familiarity))
  
twenty_younger |>
  slice_max(mean_fam)

twenty_younger |>
  slice_min(mean_fam)

# Lab 4 Q7 
q7_california_avocados <- city_avocados |>
  # Only select data for 4 regions in CA
  inner_join(cali_avocados,
             by = c('region' = 'cali_region')) |>
  mutate( region =  as.factor(region)) |>
  # Select the relevant variables
  select(SmallAvocados, 
         LargeAvocados, 
         XLargeAvocados, 
         type, 
         region) |>
  group_by(region, type) |>
  # Calculate the total number sold of each type of avocado sold for each region
  summarise(small_avocados = mean(SmallAvocados),
            large_avocados = mean(LargeAvocados),
            xlarge_avocados = mean(XLargeAvocados)) |>
  pivot_longer(cols = c('small_avocados',
                        'large_avocados',
                        'xlarge_avocados'),
               names_to = "Avocado_Size",
               values_to = "quantity_sold") |>
  # Create a new column that contains the percentage of each type of avocado sold for each region
  mutate(percent_sold = quantity_sold / sum(quantity_sold) *100,
  # This line is set levels to the factors and specify the order in the visualization
        (Avocado_Size = factor(Avocado_Size, 
                               levels = c("small_avocados", 
                                          "large_avocados", 
                                          "xlarge_avocados"))))
```

-   character -- specifically a string

```{r wd-4-string}

```

-   factor

```{r wd-4-factor}
# Lab #5
hiphop_clean <- hiphop |>
  mutate(across(c(word,
                  sex,
                  ethnic,
                  familiarity),
                  as.factor
                )) 
```

-   date

```{r wd-4-date}
# Practice Activity #5
suspects <- read_csv(here::here("data",
                                "suspect_times.csv")
                     )

suspects <- suspects |>
  mutate(Time.Spotted = ymd_hms(Time.Spotted),
         Time.Spotted = force_tz(Time.Spotted, tzone = "America/Los_Angeles"))

suspects <- suspects |>
  filter(pm(Time.Spotted) == TRUE,
         wday(Time.Spotted) != c(3,5))

Thanksgiving <- ymd(20181122, tz = "America/Los_Angeles")

timeframe <- (Thanksgiving - days(35)) %--% (Thanksgiving + days(35))

suspects <- suspects |>
  filter(Time.Spotted %within% timeframe)

Iceland <- with_tz(suspects$Time.Spotted, tzone = "Iceland")
suspects <- suspects |>
  filter(pm(Iceland) == TRUE,
         day(Time.Spotted) %in% c(22, 23, 24))

init <- ymd_hms("1970-01-01 0:0:0", tz = "America/Los_Angeles")

suspects <- suspects |>
  mutate(time = difftime(Time.Spotted, init, units = "mins"),
         time = as.integer(time)) |>
  filter(time %% 10 == 0)
```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

```{r wd-5-left}

```

-   `right_join()`

```{r wd-5-right}

```

-   `inner_join()`

```{r wd-5-inner}

```

-   `full_join()`

```{r wd-5-full}

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r wd-6-semi}

```

-   `anti_join()`

```{r wd-6-anti}

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r wd-7-long}

```

-   `pivot_wider()`

```{r wd-7-wide}

```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments:

**R-2: I can write well documented and tidy code.**

-   Example 1

```{r r-2-1}

```

-   Example 2

```{r r-2-2}

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example 1

```{r r-3-1}

```

-   Example 2

```{r r-3-2}

```

## Data Visualization & Summarization

**of variable types (e.g., numeric, character, factor, date)**

-   numeric variables

```{r dvs-1-num} Lab 2 Q6}
ggplot(data = surveys, mapping = aes(x = weight, y = hindfoot_length)) +  
   geom_jitter(alpha=.3)
```

-   numeric variables and categorical variables

```{r dvs-2-num-cat} Lab 4 Q7}
ggplot(data = q7_california_avocados, 
       mapping = aes(x = region, 
                     y = percent_sold, 
                     fill = Avocado_Size))+
  geom_col(position = "fill") +
  facet_wrap(~type) +
  # Use dodge function to offset the x axis labels
  scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
  # Specify the legend title and labels and change the colors of the graph 
  scale_fill_manual(values = c("#A6CEE3", 
                               "#1F78B4", 
                               "#B2DF8A"),
                    name = "Avocado Size",
                    labels = c("Small", 
                               "Large", 
                               "Extra-Large")) +
  # Specify the Axis Labels
  labs(x = 'Region of CA',
       y = "Proporation of Mean Avocados Sold")
```

-   categorical variables

```{r dvs-2-cat} Lab 5, Q3}
ggplot(data = count_survey,
       mapping = aes(y = day_week,
                     x = n,
                     fill = day_week)) +
  geom_bar(stat = "identity",
           show.legend = FALSE) +
  labs(y = '',
       x = "", 
       title = "Number of Rodents Captured by the Day of the Week") +
  theme(plot.title.position = 'plot') 
  
```

-   dates

```{r dvs-2-date} Lab 5 Q4}
ggplot(data = mean_weight_survey, 
       mapping = aes(y = mean_weight, 
                     x = year,
                     color = fct_reorder2(.f = genus,
                                          .y = mean_weight,
                                          .x = year))) +
  geom_line() +
  labs(y = '',
       x = "Time", 
       title = "Mean Weight (grams) by Genus Over Time") +
  guides(color = guide_legend(title = "Genus")) +
  theme(plot.title.position = 'plot') 
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   Example 1

```{r dvs-2-1} Lab 5 Q4}
ggplot(data = mean_weight_survey, 
       mapping = aes(y = mean_weight, 
                     x = year,
                     color = fct_reorder2(.f = genus,
                                          .y = mean_weight,
                                          .x = year))) +
  geom_line() +
  labs(y = '',
       x = "Time", 
       title = "Mean Weight (grams) by Genus Over Time") +
  guides(color = guide_legend(title = "Genus")) +
  theme(plot.title.position = 'plot') 
```

-   Example 2

```{r dvs-2-2} Lab 4 Q7}
# Create a column chart
ggplot(data = q7_california_avocados, 
       mapping = aes(x = region, 
                     y = percent_sold, 
                     fill = Avocado_Size))+
  geom_col(position = "fill") +
  facet_wrap(~type) +
  # Use dodge function to offset the x axis labels
  scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
  # Specify the legend title and labels and change the colors of the graph 
  scale_fill_manual(values = c("#A6CEE3", 
                               "#1F78B4", 
                               "#B2DF8A"),
                    name = "Avocado Size",
                    labels = c("Small", 
                               "Large", 
                               "Extra-Large")) +
  # Specify the Axis Labels
  labs(x = 'Region of CA',
       y = "Proporation of Mean Avocados Sold")
```

**DVS-3: I show creativity in my visualizations**

-   Example 1

```{r dvs-3-1} Lab 4 Q6}
ggplot(data = california_avocados, 
       mapping = aes(x = mean_price, 
                     y = region)) +
  geom_line(mapping = aes(group = region)) +
  geom_point(stat = "identity",
             mapping = aes(color = type)) +
  labs(title = "Mean Price between Organic and Convential Avocados by Region",
       y = '',
       x = 'Mean Price of Avocado ($)') 
```

-   Example 2

```{r dvs-3-2} Challange 2}
ggplot(data = surveys, mapping = aes(y = species, x = weight, fill = species)) +
  geom_density_ridges(show.legend = FALSE) +
  labs(y = "Species of Animal",
       x = "Weight (grams)", 
       title = "Weight in grams vs Species of Animal")   
```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example 1

```{r dvs-4-1} Lab 3 Q11}
#| output: false
twenty_younger <- hiphop_clean |>
  filter(age < 20) |>
  mutate(familiarity = as.numeric(familiarity)) |>
  group_by(word) |>
  summarize(mean_fam = mean(familiarity))
  
twenty_younger |>
  slice_max(mean_fam)

twenty_younger |>
  slice_min(mean_fam)
```

-   Example 2

```{r dvs-4-2} Lab 4 Q7}
q7_california_avocados <- city_avocados |>
  # Only select data for 4 regions in CA
  inner_join(cali_avocados,
             by = c('region' = 'cali_region')) |>
  mutate( region =  as.factor(region)) |>
  # Select the relevant variables
  select(SmallAvocados, 
         LargeAvocados, 
         XLargeAvocados, 
         type, 
         region) |>
  group_by(region, type) |>
  # Calculate the total number sold of each type of avocado sold for each region
  summarise(small_avocados = mean(SmallAvocados),
            large_avocados = mean(LargeAvocados),
            xlarge_avocados = mean(XLargeAvocados)) |>
  pivot_longer(cols = c('small_avocados',
                        'large_avocados',
                        'xlarge_avocados'),
               names_to = "Avocado_Size",
               values_to = "quantity_sold") |>
  # Create a new column that contains the percentage of each type of avocado sold for each region
  mutate(percent_sold = quantity_sold / sum(quantity_sold) *100,
  # This line is set levels to the factors and specify the order in the visualization
        (Avocado_Size = factor(Avocado_Size, 
                               levels = c("small_avocados", 
                                          "large_avocados", 
                                          "xlarge_avocados"))))
```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r dvs-5-1} Lab 4 Q6}
california_avocados <- city_avocados |>
  inner_join(cali_avocados,
             by = c('region' = 'cali_region')) |>
  mutate( region =  as.factor(region)) |>
  # Select relavent variables
  select(AveragePrice,
         type,
         region) |>
  group_by(region, type) |>
  # Calculate the mean price for every region and type of avocado combination
  summarise(mean_price = mean(AveragePrice))
```

-   Example 2

```{r dvs-5-2} Lab 4 Q7}
q7_california_avocados <- city_avocados |>
  # Only select data for 4 regions in CA
  inner_join(cali_avocados,
             by = c('region' = 'cali_region')) |>
  mutate( region =  as.factor(region)) |>
  # Select the relevant variables
  select(SmallAvocados, 
         LargeAvocados, 
         XLargeAvocados, 
         type, 
         region) |>
  group_by(region, type) |>
  # Calculate the total number sold of each type of avocado sold for each region
  summarise(small_avocados = mean(SmallAvocados),
            large_avocados = mean(LargeAvocados),
            xlarge_avocados = mean(XLargeAvocados)) |>
  pivot_longer(cols = c('small_avocados',
                        'large_avocados',
                        'xlarge_avocados'),
               names_to = "Avocado_Size",
               values_to = "quantity_sold") |>
  # Create a new column that contains the percentage of each type of avocado sold for each region
  mutate(percent_sold = quantity_sold / sum(quantity_sold) *100,
  # This line is set levels to the factors and specify the order in the visualization
        (Avocado_Size = factor(Avocado_Size, 
                               levels = c("small_avocados", 
                                          "large_avocados", 
                                          "xlarge_avocados"))))
```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call

```{r pe-1-one-call}

```

-   `across()`

```{r pe-1-across} Lab 3, Q4}
# Changing Characters to Factors
hiphop_clean <- hiphop |>
  mutate(across(c(word,
                  sex,
                  ethnic,
                  familiarity),
                  as.factor
                ))
```

**PE-4: I can use modern tools when carrying out my analysis.**

-   Example 1

```{r pe-4-1}

```

-   Example 2

```{r pe-4-2}

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

## Peer Support & Collaboration

<!-- Include an image of feedback you gave that you are proud of (either in a peer review or in Discord) -->
